#!/usr/bin/env node

/**
 * Build Script: Inject environment variables into firebase-config.js
 *
 * This script reads .env file and generates firebase-config.js with the values.
 * Run this before deploying to production.
 *
 * Usage: node build-config.js
 */

const fs = require('fs');
const path = require('path');

// Read .env file
function loadEnv() {
    const envPath = path.join(__dirname, '.env');

    if (!fs.existsSync(envPath)) {
        console.error('❌ Error: .env file not found!');
        console.log('💡 Copy .env.example to .env and fill in your Firebase values.');
        process.exit(1);
    }

    const envContent = fs.readFileSync(envPath, 'utf8');
    const env = {};

    envContent.split('\n').forEach(line => {
        line = line.trim();
        // Skip comments and empty lines
        if (!line || line.startsWith('#')) return;

        const [key, ...valueParts] = line.split('=');
        const value = valueParts.join('=').trim();

        if (key && value) {
            env[key.trim()] = value;
        }
    });

    return env;
}

// Generate firebase-config.js
function generateConfig(env) {
    const template = `// Firebase Configuration
// AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
// This file is generated by build-config.js from .env
//
// SECURITY NOTE:
// Firebase web API keys are designed to be public (client-side keys).
// Your app's security is enforced through:
// 1. ✅ Firebase Security Rules (Firestore/Storage/Database)
// 2. ✅ Authorized domains in Firebase Console
// 3. ✅ Optional: Firebase App Check for additional protection
//
// These client-side keys are NOT secret. They identify your Firebase project
// and are meant to be included in client applications.
//
// Learn more: https://firebase.google.com/docs/projects/api-keys

const firebaseConfig = {
    apiKey: "${env.FIREBASE_API_KEY}",
    authDomain: "${env.FIREBASE_AUTH_DOMAIN}",
    projectId: "${env.FIREBASE_PROJECT_ID}",
    storageBucket: "${env.FIREBASE_STORAGE_BUCKET}",
    messagingSenderId: "${env.FIREBASE_MESSAGING_SENDER_ID}",
    appId: "${env.FIREBASE_APP_ID}",
    measurementId: "${env.FIREBASE_MEASUREMENT_ID}"
};

// Firebase initialisieren
firebase.initializeApp(firebaseConfig);

// Firebase Services
const auth = firebase.auth();
const db = firebase.firestore();

// Auth Provider
const googleProvider = new firebase.auth.GoogleAuthProvider();
googleProvider.setCustomParameters({
    prompt: 'select_account'
});

const appleProvider = new firebase.auth.OAuthProvider('apple.com');

// Optional: Offline-Persistenz aktivieren
db.enablePersistence()
    .catch((err) => {
        if (err.code == 'failed-precondition') {
            console.log('Persistence can only be enabled in one tab at a time.');
        } else if (err.code == 'unimplemented') {
            console.log('The current browser does not support persistence.');
        }
    });
`;

    const configPath = path.join(__dirname, 'firebase-config.js');
    fs.writeFileSync(configPath, template, 'utf8');

    console.log('✅ firebase-config.js generated successfully!');
    console.log('📝 Config loaded from .env');
}

// Main
try {
    console.log('🔧 Building Firebase configuration...');
    const env = loadEnv();

    // Validate required variables
    const required = [
        'FIREBASE_API_KEY',
        'FIREBASE_AUTH_DOMAIN',
        'FIREBASE_PROJECT_ID',
        'FIREBASE_STORAGE_BUCKET',
        'FIREBASE_MESSAGING_SENDER_ID',
        'FIREBASE_APP_ID',
        'FIREBASE_MEASUREMENT_ID'
    ];

    const missing = required.filter(key => !env[key] || env[key].includes('your-'));

    if (missing.length > 0) {
        console.error('❌ Error: Missing or incomplete environment variables:');
        missing.forEach(key => console.error(`   - ${key}`));
        console.log('\n💡 Update your .env file with real Firebase values.');
        process.exit(1);
    }

    generateConfig(env);
    console.log('🎉 Build complete!');

} catch (error) {
    console.error('❌ Build failed:', error.message);
    process.exit(1);
}
